// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----- START ACCOUNT SCHEMA ----
model Account {
  id          Int      @id @default(autoincrement())
  accountUuid String   @unique @db.VarChar(128)
  accountName String?  @unique @db.VarChar(128)
  displayName String   @db.VarChar(255)
  email       String   @unique @db.VarChar(255)
  password    String   @db.Text
  isVerify    Boolean? @default(false)
  isRemove    Boolean? @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  AccountVerify  AccountVerify?
  AccountToken   AccountToken?
  AccountSetting AccountSetting?
  Wallet         Wallet[]

  // Mapping
  @@map("account")
}

model AccountVerify {
  accountId Int       @id
  token     String    @db.VarChar(255)
  expiredAt DateTime
  verifyAt  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Releations
  Account Account @relation(fields: [accountId], references: [id])

  // Mapping
  @@map("account_verify")
}

model AccountToken {
  accountId    Int       @id
  refreshToken String    @db.Text
  expiredAt    DateTime?
  scopes       String?   @db.VarChar(255)
  userAgent    String?   @db.VarChar(128)
  ipAddress    String?   @db.VarChar(64)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Releations
  Account Account @relation(fields: [accountId], references: [id])

  // Mapping
  @@map("account_token")
}

model AccountSetting {
  accountId  Int      @id
  language   String?  @default("en-EN") @db.VarChar(5)
  dateFormat String?  @default("dd-mm-yyyy") @db.VarChar(10)
  timeZone   String?  @default("+07:00") @db.VarChar(50)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Releations
  Account Account @relation(fields: [accountId], references: [id])

  // Mapping
  @@map("account_setting")
}

// ----- START WALLET SCHEMA ----
model Wallet {
  id               Int      @id @default(autoincrement())
  accountId        Int
  currencyId       Int
  name             String   @db.VarChar(255)
  image            String   @db.VarChar(255)
  excludeFromTotal Boolean  @default(false)
  isRemove         Boolean? @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Releations
  Account              Account            @relation(fields: [accountId], references: [id])
  CurrencyLists        CurrencyLists?     @relation(fields: [currencyId], references: [id])
  WalletCategories     WalletCategories[]
  walletCategoryListId Int?

  // Mapping
  @@map("wallet")
}

model WalletCategories {
  id        Int           @id @default(autoincrement())
  walletId  Int
  name      String        @db.VarChar(50)
  image     String        @db.VarChar(255)
  type      CategoryTypes @default(expense)
  isParent  Boolean?      @default(false)
  parentId  Int?
  isRemove  Boolean?      @default(false)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Releations
  Wellet Wallet @relation(fields: [walletId], references: [id])

  // Mapping
  @@map("wallet_categories")
}

enum CategoryTypes {
  expense
  income
}

model CurrencyLists {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(50)
  symbol    String   @db.VarChar(4)
  isoCode   String   @db.VarChar(4)
  image     String   @db.VarChar(255)
  isRemove  Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Releations
  Wallet Wallet[]

  // Mapping
  @@map("currency_list")
}

// ----- END USER SCHEMA ----
model User {
  id Int @id @default(autoincrement())

  email String @unique
  hash  String

  first_name String?
  last_name  String?

  bookmarks Bookmark[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("users")
}

// ----- END BOOKMARK SCHEMA ----
model Bookmark {
  id Int @id @default(autoincrement())

  title       String
  description String?
  link        String

  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("bookmarks")
}
